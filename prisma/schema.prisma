// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  gender           String?
  email            String             @unique
  isVerified       Boolean            @default(false)
  password         String
  country          String?
  profileImg       String?
  dob              DateTime?
  verificationCode String?
  phoneNumber      String?
  firebaseDeviceId String?
  role             RoleStatus         @default(user)
  userInterests    UserInterests[]
  docItems         DocItem[]
  savedItems       Saved[]
  createdAt        DateTime           @default(now())
  Review           Review[]
  UserNotification UserNotification[]
  InteractionEvent InteractionEvent[]

  @@index([email])
}

model Category {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  subCategory      SubCategory[]
  isDoc            Boolean
  interestedUsers  UserInterests[]
  docItem          DocItem[]
  Notification     Notification[]
  InteractionEvent InteractionEvent[]
}

model UserInterests {
  id         Int      @id @default(autoincrement())
  userId     Int
  categoryId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model SubCategory {
  id               Int                @id @default(autoincrement())
  name             String
  categoryId       Int
  featuredImage    String
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  placeItems       PlaceItem[]
  InteractionEvent InteractionEvent[]
}

model PlaceItem {
  id               Int                @id @default(autoincrement())
  title            String
  description      String
  workingHours     String
  location         String
  latitude         Float
  longitude        Float
  businessEmail    String
  phoneNumber      String
  bookLink         String?
  subCategoryId    Int
  subCategory      SubCategory        @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  savedItems       Saved[]
  Review           Review[]
  InteractionEvent InteractionEvent[]
  PlaceImage       PlaceImage[]

  @@index([subCategoryId])
}

model PlaceImage {
  id      Int       @id @default(autoincrement())
  url     String
  placeId Int
  place   PlaceItem @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(references: [id], fields: [userId])
  placeItemId Int
  placeItem   PlaceItem @relation(references: [id], fields: [placeItemId])
  content     String
  rates       Int

  @@unique([userId, placeItemId])
  @@index([userId, placeItemId])
}

model DocItem {
  id               Int                @id @default(autoincrement())
  title            String
  description      String
  summary          String
  authorId         Int
  author           User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  location         String?
  featuredImg      String
  savedItems       Saved[]
  provinceId       Int?
  province         Provinces?         @relation(fields: [provinceId], references: [id])
  createdAt        DateTime           @default(now())
  InteractionEvent InteractionEvent[]
}

model Locations {
  id               Int                @id @default(autoincrement())
  address          String
  title            String
  description      String?
  latitude         Float
  longitude        Float
  provinceId       Int
  province         Provinces          @relation(fields: [provinceId], references: [id])
  InteractionEvent InteractionEvent[]
  LocationImage    LocationImage[]
}

model LocationImage {
  id         Int       @id @default(autoincrement())
  url        String
  locationId Int
  location      Locations @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Provinces {
  id               Int                @id @default(autoincrement())
  name             String
  image            String
  locations        Locations[]
  docItems         DocItem[]
  InteractionEvent InteractionEvent[]
}

model Notification {
  id                Int                @id @default(autoincrement())
  categoryId        Int?
  category          Category?          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  type              NotificationType   @default(SYSTEM)
  title             String
  body              String
  data              Json?
  userNotifications UserNotification[]
  createdAt         DateTime           @default(now())
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId Int
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())

  @@unique([userId, notificationId])
  @@index([userId, isRead])
}

model Saved {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  docItemId   Int?
  docItem     DocItem?   @relation(fields: [docItemId], references: [id], onDelete: Cascade)
  placeItemId Int?
  placeItem   PlaceItem? @relation(fields: [placeItemId], references: [id], onDelete: Cascade)
}

model InteractionEvent {
  id            Int          @id @default(autoincrement())
  type          EventType
  userId        Int?
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  placeItemId   Int?
  placeItem     PlaceItem?   @relation(fields: [placeItemId], references: [id], onDelete: Cascade)
  locationId    Int?
  location      Locations?   @relation(fields: [locationId], references: [id])
  docItemId     Int?
  docItem       DocItem?     @relation(fields: [docItemId], references: [id], onDelete: Cascade)
  provinceId    Int?
  province      Provinces?   @relation(fields: [provinceId], references: [id])
  createdAt     DateTime     @default(now())

  @@index([type])
  @@index([createdAt])
}

enum EventType {
  CLICK
  BOOK
  REVIEW
}

enum RoleStatus {
  admin
  moderator
  support
  user
}

enum NotificationType {
  SYSTEM
  ALERT
  REMINDER
  PROMOTION
}
